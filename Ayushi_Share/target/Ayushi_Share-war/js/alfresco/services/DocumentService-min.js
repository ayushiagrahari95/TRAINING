define(["dojo/_base/declare","alfresco/core/Core","alfresco/core/CoreXhr","service/constants/Default","alfresco/core/PathUtils","alfresco/core/NodeUtils","dojo/_base/lang","dojo/dom-construct","dojo/_base/array"],function(w,o,i,n,g,m,y,h,j){return w([o,i,g],{i18nRequirements:[{i18nFile:"./i18n/DocumentService.properties"}],downloadAPI:n.PROXY_URI+"api/internal/downloads",cancelEditAPI:n.PROXY_URI+"slingshot/doclib/action/cancel-checkout/node/",maxArchiveProgressRetryCount:6,archiveProgressUpdateInterval:250,archiveProgressUpdateFailureInterval:5000,requestArchiveTopic:"ALF_ARCHIVE_REQUEST",requestArchiveProgressTopic:"ALF_ARCHIVE_PROGRESS_REQUEST",requestDelayedArchiveProgressTopic:"ALF_ARCHIVE_DELAYED_PROGRESS_REQUEST",archiveProgressFailureTopic:"ALF_ARCHIVE_PROGRESS_REQUEST_FAILURE",archiveProgressSuccessTopic:"ALF_ARCHIVE_PROGRESS_REQUEST_SUCCESS",deleteArchiveTopic:"ALF_ARCHIVE_DELETE",downloadNodeTopic:"ALF_DOWNLOAD_FILE",cancelEditTopic:"ALF_DOC_CANCEL_EDITING",cancelEditSuccessTopic:"ALF_DOC_CANCEL_EDIT_SUCCESS",parentNodeRefTopic:"ALF_DOC_GET_PARENT_NODEREF",constructor:function d(A){y.mixin(this,A);this.alfSubscribe("ALF_RETRIEVE_SINGLE_DOCUMENT_REQUEST",y.hitch(this,this.onRetrieveSingleDocumentRequest));this.alfSubscribe("ALF_RETRIEVE_DOCUMENTS_REQUEST",y.hitch(this,this.onRetrieveDocumentsRequest));this.alfSubscribe(this.requestArchiveTopic,y.hitch(this,this.onRequestArchive));this.alfSubscribe(this.requestArchiveProgressTopic,y.hitch(this,this.onRequestArchiveProgress));this.alfSubscribe(this.requestDelayedArchiveProgressTopic,y.hitch(this,this.onRequestDelayedArchiveProgress));this.alfSubscribe(this.deleteArchiveTopic,y.hitch(this,this.onDeleteDownloadArchive));this.alfSubscribe(this.downloadNodeTopic,y.hitch(this,this.onDownloadFile));this.alfSubscribe(this.cancelEditTopic,y.hitch(this,this.onCancelEdit));this.alfSubscribe(this.parentNodeRefTopic,y.hitch(this,this.onGetParentNodeRef))},onRetrieveSingleDocumentRequest:function u(H){if(H==null||H.nodeRef==null){this.alfLog("warn","A request was made to retrieve the details of a document but no 'nodeRef' attribute was provided",H,this)}else{var I=m.processNodeRef(H.nodeRef),C=I.uri;var G=(H.site!=null&&H.site!=="")?"{type}/site/{site}/{container}":"{type}/node/"+C;if(H.filter!=null&&H.filter.filterId==="path"){var E=encodeURIComponent(H.filter.filterData).replace(/%2F/g,"/").replace(/%25/g,"%2525");G+=this.combinePaths("/",E)+"/"}var D="?view=browse&noCache="+new Date().getTime()+"&includeThumbnails=true";var F=(H.alfResponseTopic!=null)?H.alfResponseTopic:"ALF_RETRIEVE_SINGLE_DOCUMENT_REQUEST";var A=n.URL_SERVICECONTEXT+"components/documentlibrary/data/node/"+C+D;var B={alfTopic:F,url:A,method:"GET",callbackScope:this,originalPayload:H};this.serviceXhr(B)}},onRetrieveDocumentsRequest:function f(I){var F="alfresco://company/home",C="alfresco/company/home";if(I.nodeRef!=null&&I.nodeRef!==""){var J=m.processNodeRef(I.nodeRef);F=I.nodeRef;C=J.uri}var H=(I.site!=null&&I.site!=="")?"{type}/site/{site}/{container}":"{type}/node/"+C;if(I.filter!=null&&I.filter.path!=null){var E=encodeURIComponent(I.filter.path).replace(/%2F/g,"/").replace(/%25/g,"%2525");H+=this.combinePaths("/",E)}if(H.lastIndexOf("/")===H.length-1){H=H.substring(0,H.length-1)}var D=y.replace(H,{type:encodeURIComponent(I.type),site:encodeURIComponent(I.site),container:encodeURIComponent(I.container)});if(I.filter){if(I.filter.filter!=null){D+="?filter="+I.filter.filter}else{if(I.filter.tag!=null){D+="?filter=tag&filterData="+I.filter.tag}else{if(I.filter.category!=null){D+="?filter=category&filterData="+I.filter.category}else{D+="?filter=path"}}}}if(I.pageSize!=null&&I.page!=null){D+="&size="+I.pageSize+"&pos="+I.page}D+="&sortAsc="+I.sortAscending+"&sortField="+encodeURIComponent(I.sortField);if(I.site==null){if(I.libraryRoot!=null){D+="&libraryRoot="+encodeURIComponent(I.libraryRoot)}else{D+="&libraryRoot="+encodeURIComponent(F)}}D+="&view=browse&noCache="+new Date().getTime();var G=(I.alfResponseTopic!=null)?I.alfResponseTopic:"ALF_RETRIEVE_DOCUMENTS_REQUEST";var A=n.URL_SERVICECONTEXT+"components/documentlibrary/data/doclist/"+D;var B={alfTopic:G,url:A,method:"GET",callbackScope:this};this.serviceXhr(B)},onRequestArchive:function r(D){var A=D.nodes,B=this.generateUuid();if(!A){this.alfLog("error","No Nodes to generate Archive from");return}var C=this.alfSubscribe(B+"_SUCCESS",y.hitch(this,this.onRequestArchiveSuccess));this.serviceXhr({alfTopic:B,subscriptionHandle:C,url:this.downloadAPI,method:"POST",data:A,payload:D})},onRequestArchiveSuccess:function l(B){this.alfLog("info","Archive successfully requested");if(B.subscriptionHandle){this.alfUnsubscribe(B.subscriptionHandle)}var A=y.getObject("requestConfig.payload",false,B);if(!A){this.alfLog("error","Unable to retrieve passed in payload from requestConfig.");return}A.archiveNodeRef=y.getObject("response.nodeRef",false,B);if(!A.archiveNodeRef){this.alfLog("error","archiveNodeRef missing from response object.");return}this.alfPublish(this.requestArchiveProgressTopic,A)},onRequestArchiveFailure:function z(A){this.alfLog("error","Unable to request archive")},onRequestArchiveProgress:function c(C){var D=(C.requestConfig)?y.getObject("requestConfig.progressRequestPayload",false,C):C;if(!D.archiveNodeRef){this.alfLog("error","Unable to retrieve nodeRef from payload: "+D);return}var B=this.generateUuid();if(D.subscriptionHandles){this.alfUnsubscribe(D.subscriptionHandles)}var A=[this.alfSubscribe(B+"_SUCCESS",y.hitch(this,this.onActionRequestArchiveProgressSuccess)),this.alfSubscribe(B+"_FAILURE",y.hitch(this,this.onActionRequestArchiveProgressFailure))];this.serviceXhr({alfTopic:B,subscriptionHandles:A,progressRequestPayload:D,url:this.downloadAPI+"/"+D.archiveNodeRef.replace("://","/")+"/status",method:"GET"})},onRequestDelayedArchiveProgress:function k(A){this.alfPublishDelayed(this.requestArchiveProgressTopic,A,this.archiveProgressUpdateInterval)},onActionRequestArchiveProgressSuccess:function b(B){if(B.subscriptionHandles){this.alfUnsubscribe(B.subscriptionHandles)}if(!(B&&B.response&&B.response.status)){this.alfLog("error","Archive Progress Response Status missing");return}var A=B.response.status;var C=B.requestConfig.progressRequestPayload;B.nodeRef=B.requestConfig.progressRequestPayload.archiveNodeRef;switch(A){case"PENDING":this.alfPublish(this.requestDelayedArchiveProgressTopic,B);break;case"IN_PROGRESS":this.alfPublish(this.requestDelayedArchiveProgressTopic,B);this.alfPublish(C.progressUpdateTopic,B);break;case"DONE":this.alfPublish(C.progressCompleteTopic,B);break;case"CANCELLED":this.alfLog("info","Archive cancelled");this.alfPublish(C.progressCancelledTopic,B);break;default:progressRequestPayloads.errorMessage=A;this.alfPublish(C.progressErrorTopic,B);break}},onActionRequestArchiveProgressFailure:function t(A){this.alfLog("warn","Error getting archive progress: "+A);if(A.subscriptonHandles){this.alfUnsubscribe(A.subscriptionHandles)}var B=A.requestConfig.progressRequestPayload.failureCount||0;if(B<this.maxArchiveProgressRetryCount){A.requestConfig.progressRequestPayload.failureCount=++B;this.alfPublish(this.requestDelayedArchiveProgressTopic,A)}else{this.alfLog("Warn","Failed to get archive progress");this.alfPublish(this.archiveProgressFailureTopic,A)}},onDeleteDownloadArchive:function p(A){this.serviceXhr({url:this.downloadAPI+"/"+A.nodeRef.replace("://","/"),method:"delete"})},onDownloadFile:function a(D){var A=m.processNodeRef(D.nodeRef);var E=D.fileName||this.message("services.DocumentService.archiveName")+".zip";var C=h.create("form");C.method="GET";C.action=n.PROXY_URI+"api/node/content/"+A.uri+"/"+encodeURIComponent(E);h.place(C,document.body);var B=h.create("iframe");B.style.display="none";B.name=B.id="downloadArchive_"+this.generateUuid();h.place(B,document.body);window.frames[B.name].name=B.name;C.target=B.name;C.submit()},onCancelEdit:function v(B){if(!B.documents){this.alfLog("error","Uable to cancel editing: documents missing from payload.")}var A=m.nodeRefArray(B.documents);j.forEach(A,y.hitch(this,this.onCancelEditNode))},onCancelEditNode:function s(C){var A=m.processNodeRef(C);var B=this.generateUuid();var D=this.alfSubscribe(B+"_SUCCESS",y.hitch(this,this.onCancelEditNodeSuccess));this.serviceXhr({alfTopic:B,subscriptionHandles:D,url:this.cancelEditAPI+A.uri,method:"POST",data:{}})},onCancelEditNodeSuccess:function q(A){this.alfPublish(this.cancelEditSuccessTopic,A)},onGetParentNodeRef:function e(C){var A=this.generateUuid(),B=this.alfSubscribe(A+"_SUCCESS",y.hitch(this,this.onGetParentNodeRefSuccess));if(y.isArray(C.subscriptionHandles)){C.subscriptionHandles.push(B)}C.alfResponseTopic=A;this.alfPublish("ALF_RETRIEVE_SINGLE_DOCUMENT_REQUEST",C)},onGetParentNodeRefSuccess:function x(C){var A=y.getObject("requestConfig.originalPayload.originalResponseTopic",false,C),B={node:C.response.item.parent};if(A){this.alfPublish(A,B)}else{this.alfLog("error","Unable to retrieve originalResponseTopic, so can't let the original caller know we have the parentNode Ref. :-(")}}})});