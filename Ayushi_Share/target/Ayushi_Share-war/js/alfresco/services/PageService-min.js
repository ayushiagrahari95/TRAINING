define(["dojo/_base/declare","alfresco/core/Core","alfresco/core/CoreXhr","alfresco/services/_PageServiceTopicMixin","alfresco/core/NotificationUtils","alfresco/core/ObjectTypeUtils","dojo/_base/lang","dojo/_base/array","dojo/dom-construct","service/constants/Default"],function(w,o,k,r,v,q,y,l,i,n){return w([o,k,r,v],{i18nRequirements:[{i18nFile:"./i18n/PageService.properties"}],constructor:function e(z){y.mixin(this,z);this.alfSubscribe("ALF_AVAILABLE_PAGE_DEFINITIONS",y.hitch(this,"loadPages"));this.alfSubscribe(this.createPageTopic,y.hitch(this,"createPage"));this.alfSubscribe(this.updatePageTopic,y.hitch(this,"updatePage"));this.alfSubscribe("ALF_EXPORT_PAGE_DEFINITION",y.hitch(this,"exportPageModel"))},exportPageModel:function a(C){var z=this.getPageDefinitionFromPayload(C);delete z.publishOnReadyEditorConfig;delete z.servicesEditorConfig;delete z.widgetsEditorConfig;var A="model.jsonModel = "+JSON.stringify(z,null,"   ");A=A.replace(/\"([^\"]*)\":/g,"$1:");this.generateWsDownload(C.pageName+".get.js",A);var D="<webscript>\n  <shortname></shortname>\n  <description></description>\n  <family></family>\n  <url></url>\n </webscript>";this.generateWsDownload(C.pageName+".get.desc.xml",D);var B='<@processJsonModel group="share"/>';this.generateWsDownload(C.pageName+".get.html.ftl",B)},generateWsDownload:function g(B,A){var z=i.create("a",{href:"data:text/plain;charset=utf-8,"+encodeURIComponent(A),download:B});z.click()},_cleanUpModelObject:function u(z,A){if(z=="widgetsForDisplay"){delete A[z]}},loadPages:function t(z){this.serviceXhr({url:n.PROXY_URI+"/remote-share/pages",method:"GET",responseTopic:z.responseTopic,successCallback:this.loadPagesSuccess,failureCallback:this.loadPagesFailure,callbackScope:this})},loadPagesSuccess:function b(A,z){if(A!=null&&A.items!=null&&q.isArray(A.items)){var B=(z.responseTopic!=null)?z.responseTopic:this.availablePagesLoadSuccess;var C=[];l.forEach(A.items,y.hitch(this,"processAvailablePageDefResults",C));this.alfPublish(B,{options:C,response:A,originalRequestConfig:z})}else{this.alfLog("error","The request to retrieve available page definitions returned a response that could not be interpreted",A,z,this)}},processAvailablePageDefResults:function d(C,B,z){if(B.name==null||B.nodeRef==null){this.alfLog("error","Missing attributes from page definition",B,this)}else{var A={label:B.name,value:B.nodeRef};C.push(A)}},loadPagesFailure:function h(A,z){this.availablePagesLoadFailure(this.availablePagesTopic,{response:A,originalRequestConfig:z})},getPageDefinitionFromPayload:function s(A){var z={};if(A.pageDefinition==null){z={publishOnReady:A.publishOnReady.widgetsConfig,publishOnReadyEditorConfig:A.publishOnReady.editorConfig,services:A.services.widgetsConfig,servicesEditorConfig:A.services.editorConfig,widgets:A.widgets.widgetsConfig,widgetsEditorConfig:A.widgets.editorConfig}}else{z=A.pageDefinition}return z},createPage:function j(A){if(A!=null&&A.pageName!=null){var z={name:A.pageName,json:this.getPageDefinitionFromPayload(A)};this.serviceXhr({url:n.PROXY_URI+"remote-share/page-definition",data:z,method:"POST",successCallback:this.pageCreateSuccess,failureCallback:this.pageCreateFailure,callbackScope:this})}else{this.alfLog("warn","A request was made to save a page definition to the repository but not enough information was provided",A)}},pageCreateSuccess:function m(A,z){this.alfLog("log","Successfully created page",A,z);this.displayMessage(this.message("page.creation.success",[z.data.name]));this.alfPublish(this.createPageSuccessTopic,{response:A,originalRequestConfig:z})},pageCreateFailure:function p(A,z){this.alfLog("error","Failed to create page",A,z);this.displayMessage(this.message("page.creation.failure",[z.data.name]));this.alfPublish(this.createPageFailureTopic,{response:A,originalRequestConfig:z})},updatePage:function f(A){if(A!=null&&A.pageName!=null){var z={name:A.pageName,json:this.getPageDefinitionFromPayload(A)};this.serviceXhr({url:n.PROXY_URI+"remote-share/page-definition/"+A.pageName,data:z,method:"PUT",successCallback:this.pageUpdateSuccess,failureCallback:this.pageUpdateFailure,callbackScope:this})}else{this.alfLog("warn","A request was made to update a page definition to the repository but not enough information was provided",A)}},pageUpdateSuccess:function x(A,z){this.alfLog("log","Successfully updated page",A,z);this.displayMessage(this.message("page.update.success",[z.data.name]));this.alfPublish(this.updatePageSuccessTopic,{response:A,originalRequestConfig:z})},pageUpdateFailure:function c(A,z){this.alfLog("error","Failed to update page",A,z);this.displayMessage(this.message("page.update.failure",[z.data.name]));this.alfPublish(this.updatePageFailureTopic,{response:A,originalRequestConfig:z})}})});